jobs:
  - job: docker_build
    pool:
      vmImage: ubuntu-20.04
    strategy:
      matrix:
        mambaforge:
          MINIFORGE_NAME: "Mambaforge"
          MINIFORGE_VERSION: "4.4.4"
          DOCKERFILE: "ubuntu"
        mambaforge-pypy3:
          MINIFORGE_NAME: "Mambaforge-pypy3"
          MINIFORGE_VERSION: "4.4.4"
          DOCKERFILE: "ubuntu"
        miniforge3:
          MINIFORGE_NAME: "Miniforge3"
          MINIFORGE_VERSION: "4.4.4"
          DOCKERFILE: "ubuntu"
        miniforge-pypy3:
          MINIFORGE_NAME: "Miniforge-pypy3"
          MINIFORGE_VERSION: "4.4.4"
          DOCKERFILE: "ubuntu"
    timeoutInMinutes: 360
    steps:
      - script: |
          echo '{"experimental": true, "cgroup-parent": "/actions_job"}' | sudo tee /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo service docker restart
        displayName: Activate experimental Docker features
      - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        displayName: Install qemu static
      - script: |
          set -euxo pipefail
          docker buildx ls
          docker buildx create --use --platform linux/arm64/v8,linux/amd64,linux/ppc64le
          # Build the image for all platforms and store the final result in the build cache.
          # All the later steps will pick this up from the cache.
          docker buildx build --platform linux/arm64/v8,linux/amd64,linux/ppc64le -f ubuntu/Dockerfile --build-arg MINIFORGE_NAME --build-arg MINIFORGE_VERSION .
          # As we need to fallback to the docker builder to run the tests, we cannot run all tests at once.
          for platform in "linux/arm64/v8" "linux/amd64" "linux/ppc64le"; do
            docker buildx build --platform ${platform} -f ubuntu/Dockerfile --build-arg MINIFORGE_NAME --build-arg MINIFORGE_VERSION -t localforge --load .
            # We need to use the docker builder instead of the docker-container builder to fetch from local registry.
            docker buildx build --platform ${platform} -f tests/Dockerfile.root tests/ --build-arg IMAGE_TO_TEST=localforge --builder default
          done
        displayName: Build and test image
        env:
          MINIFORGE_NAME: $(MINIFORGE_NAME)
          MINIFORGE_VERSION: $(MINIFORGE_VERSION)
          DOCKERFILE: $(DOCKERFILE)
      - script: |
          set -euxo pipefail
          docker login -u condaforgebot -p ${DH_PASSWORD}
          docker login -u conda_forge_daemon -p ${CFD_QUAY_PASSWORD} quay.io
          for registry in "" "quay.io/"; do
            docker buildx build --platform linux/arm64/v8,linux/amd64,linux/ppc64le -f ubuntu/Dockerfile --build-arg MINIFORGE_NAME --build-arg MINIFORGE_VERSION -t ${registry}condaforge/${MINIFORGE_NAME/M/m}:latest --push .
            docker buildx build --platform linux/arm64/v8,linux/amd64,linux/ppc64le -f ubuntu/Dockerfile --build-arg MINIFORGE_NAME --build-arg MINIFORGE_VERSION -t ${registry}condaforge/${MINIFORGE_NAME/M/m}:${MINIFORGE_VERSION} --push .
          done
        displayName: Push image
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        env:
          MINIFORGE_NAME: $(MINIFORGE_NAME)
          MINIFORGE_VERSION: $(MINIFORGE_VERSION)
          DOCKERFILE: $(DOCKERFILE)
          CFD_QUAY_PASSWORD: $(CFD_QUAY_PASSWORD)
          DH_PASSWORD: $(DH_PASSWORD)
